[{"F:\\桌面\\论文\\noteTaking\\src\\web\\src\\index.js":"1","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\App.js":"2","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\login\\login.js":"3","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\body\\body.js":"4","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\server.js":"5","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\note\\note.js":"6","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\Editor\\editor.js":"7","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\utils\\index.js":"8"},{"size":523,"mtime":1614166376315,"results":"9","hashOfConfig":"10"},{"size":622,"mtime":1619009411193,"results":"11","hashOfConfig":"10"},{"size":8306,"mtime":1618924701408,"results":"12","hashOfConfig":"10"},{"size":11557,"mtime":1619008370188,"results":"13","hashOfConfig":"10"},{"size":944,"mtime":1619009552986,"results":"14","hashOfConfig":"10"},{"size":3175,"mtime":1619006811350,"results":"15","hashOfConfig":"10"},{"size":7705,"mtime":1619008560061,"results":"16","hashOfConfig":"10"},{"size":1265,"mtime":1614768168228,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"nfz1d5",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"F:\\桌面\\论文\\noteTaking\\src\\web\\src\\index.js",[],["39","40"],"F:\\桌面\\论文\\noteTaking\\src\\web\\src\\App.js",["41","42"],"F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\login\\login.js",["43"],"import React, { Component } from 'react';\r\n\r\nimport { Input, Button, Tooltip, message } from 'antd';\r\nimport utils from '../utils'\r\nimport { UserOutlined, UnlockOutlined } from '@ant-design/icons';\r\nimport http from '../../server';\r\nimport './login.css';\r\n\r\nexport default class Login extends Component {\r\n  state = {\r\n    status: 'login',\r\n    registeruser: \"\",\r\n    registerpwd: \"\",\r\n    comfirmpwd: \"\",\r\n    loginuser: \"\",\r\n    loginpwd: \"\"\r\n  }\r\n\r\n  loginState = [0, 0]\r\n\r\n  registerState = [0, 0]\r\n\r\n  statusChage = (status,params) => {\r\n    let stateObj = {\r\n      status,\r\n      registeruser: \"\",\r\n      registerpwd: \"\",\r\n      comfirmpwd: \"\",\r\n      loginuser: \"\",\r\n      loginpwd: \"\",\r\n    }\r\n    if(params){\r\n      stateObj.loginuser = this.state.registeruser;\r\n      stateObj.loginpwd = this.state.registerpwd;\r\n    }\r\n    this.setState(stateObj)\r\n  }\r\n\r\n  userInput = (v, type) => {\r\n\r\n    switch (type) {\r\n      case \"registeruser\":\r\n        this.setState({ registeruser: v.target.value })\r\n        break;\r\n      case \"registerpwd\":\r\n        this.setState({ registerpwd: v.target.value })\r\n        break;\r\n      case \"comfirmpwd\":\r\n        this.setState({ comfirmpwd: v.target.value })\r\n        break;\r\n      case \"loginuser\":\r\n        this.setState({ loginuser: v.target.value })\r\n        break;\r\n      case \"loginpwd\":\r\n        this.setState({ loginpwd: v.target.value })\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n  userBlur = (v, type) => {\r\n    switch (type) {\r\n      case \"registeruser\":\r\n        if (utils.isPhoneOrEmail(v.target.value)) {\r\n          //手机号\r\n          if (!utils.isPhoneAvailable(v.target.value)) {\r\n            message.info('请输入正确的手机号');\r\n          }\r\n        } else {\r\n          //邮箱\r\n          if (!utils.isEmailAvailable(v.target.value)) {\r\n            message.info('请输入正确邮箱')\r\n          }\r\n        }\r\n        break;\r\n      case \"registerpwd\":\r\n        if (utils.passwordAvailable(v.target.value)) {\r\n\r\n        } else {\r\n          message.info('密码格式不正确')\r\n        }\r\n        break;\r\n      case \"comfirmpwd\":\r\n        if (this.state.registerpwd == v.target.value) {\r\n\r\n        } else {\r\n          message.info('确认密码保持一致')\r\n        }\r\n        break;\r\n      case \"loginuser\":\r\n        if (utils.isPhoneOrEmail(v.target.value)) {\r\n          //手机号\r\n          if (!utils.isPhoneAvailable(v.target.value)) {\r\n            message.info('请输入正确的手机号');\r\n          }\r\n        } else {\r\n          //邮箱\r\n          if (!utils.isEmailAvailable(v.target.value)) {\r\n            message.info('请输入正确邮箱')\r\n          }\r\n        }\r\n        break;\r\n      case \"loginpwd\":\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n  }\r\n\r\n  userLogin = () => {\r\n    http.post('login',{\r\n      \"em_ph\":this.state.loginuser,\r\n      \"passwd\":this.state.loginpwd\r\n    }).then((data)=>{\r\n      if(data.data.success){\r\n        if(data.data.data.id){\r\n          localStorage.setItem(\"user\",window.btoa(window.encodeURIComponent(JSON.stringify({id:data.data.data.id,name:data.data.data.username}))));\r\n          this.props.change(true);\r\n          //存\r\n        }\r\n        else{\r\n          message.error('登录失败')\r\n          return ;\r\n        }  \r\n      }\r\n      else{\r\n        message.error(\"请检查用户名、密码\");\r\n      }\r\n    })\r\n    return true\r\n  }\r\n\r\n  userRegester = () => {\r\n    http.post('register',{\r\n      \"em_ph\":this.state.registeruser,\r\n      \"passwd\":this.state.registerpwd\r\n    }).then((data)=>{\r\n      if(data.data.success){\r\n        // this.props.change(true);\r\n        this.statusChage('login',{fromPage:'reggister'});\r\n      } else {\r\n        message.error(\"注册失败\");\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      this.state.status === \"login\"\r\n        ? <div className=\"loginPage\">\r\n          <div className=\"userContent\">\r\n            <div className='loginTitle'>\r\n              <h1>用户登录</h1>\r\n            </div>\r\n            <Input className='user'\r\n              size=\"large\"\r\n              placeholder=\"请输入邮箱/手机号\"\r\n              value={this.state.loginuser}\r\n              onChange={(v) => {\r\n                this.userInput(v, 'loginuser');\r\n              }}\r\n              onBlur={(v) => {\r\n                this.userBlur(v, 'loginuser');\r\n              }}\r\n              prefix={<UserOutlined />} />\r\n            <Input.Password className=\"password\"\r\n              size=\"large\"\r\n              placeholder=\"请输入密码\"\r\n              value={this.state.loginpwd}\r\n              onChange={(v) => {\r\n                this.userInput(v, 'loginpwd');\r\n              }}\r\n              onBlur={(v) => {\r\n                this.userBlur(v, 'loginpwd');\r\n              }}\r\n              prefix={<UnlockOutlined />} />\r\n            <div className=\"loginFooter\">\r\n              <div className=\"left\">\r\n                <Button type=\"link\" onClick={() => { this.statusChage('register') }}>\r\n                  还没账户注册一个？\r\n                </Button>\r\n              </div>\r\n              <div className=\"right\">\r\n                {/* <Button className=\"register\" type=\"default\" shape=\"round\">注册</Button> */}\r\n                <Button className=\"login\"\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  onClick={() => { this.userLogin() }}>\r\n                  登录\r\n                  </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        : <div className=\"registerPage\">\r\n          <div className=\"userContent\">\r\n            <div className='loginTitle'>\r\n              <h1>用户注册</h1>\r\n            </div>\r\n\r\n            <Input className='user'\r\n              size=\"large\"\r\n              placeholder=\"请输入用户名/手机号\"\r\n              prefix={<UserOutlined />}\r\n              value={this.state.registeruser}\r\n              onChange={(v) => {\r\n                this.userInput(v, 'registeruser');\r\n              }}\r\n              onBlur={(v) => {\r\n                this.userBlur(v, 'registeruser');\r\n              }}\r\n            />\r\n\r\n            <Tooltip\r\n              trigger={['focus']}\r\n              title={`1、密码必须由数字、字符、特殊字符三种中的两种组成;\r\n              2、密码长度不能少于8个字符;`}\r\n              placement=\"right\"\r\n              overlayClassName=\"numeric-input\"\r\n            >\r\n              <Input.Password className=\"password\"\r\n                size=\"large\"\r\n                visibilityToggle={false}\r\n                placeholder=\"请输入密码\"\r\n                value={this.state.registerpwd}\r\n                onChange={(v) => {\r\n                  this.userInput(v, 'registerpwd');\r\n                }}\r\n                onBlur={(v) => {\r\n                  this.userBlur(v, 'registerpwd');\r\n                }}\r\n                prefix={<UnlockOutlined />}\r\n              />\r\n            </Tooltip>\r\n\r\n            <Input.Password className=\"password\"\r\n              size=\"large\"\r\n              visibilityToggle={false}\r\n              value={this.state.comfirmpwd}\r\n              onChange={(v) => {\r\n                this.userInput(v, 'comfirmpwd');\r\n              }}\r\n              onBlur={(v) => {\r\n                this.userBlur(v, 'comfirmpwd');\r\n              }}\r\n              placeholder=\"请再次确认密码\"\r\n              prefix={<UnlockOutlined />}\r\n            />\r\n\r\n            <div className=\"loginFooter\">\r\n              <div className=\"left\">\r\n                <Button type=\"link\" onClick={() => { this.statusChage('login') }}>\r\n                  有账户直接登录！\r\n                </Button>\r\n              </div>\r\n              <div className=\"right\">\r\n                <Button className=\"cancle\"\r\n                  type=\"default\"\r\n                  shape=\"round\"\r\n                  onClick={() => { this.statusChage('login') }}>\r\n                  取消\r\n                  </Button>\r\n                <Button className=\"register\"\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  onClick={() => { this.userRegester() }}>\r\n                  注册\r\n                  </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\body\\body.js",["44","45","46","47","48","49","50","51","52","53","54","55"],"import React, { Component, createRef } from 'react';\r\nimport { Menu, Button, Modal, Empty, Input, message } from 'antd';\r\nimport _ from 'loadsh';\r\nimport {\r\n  MenuUnfoldOutlined,\r\n  MenuFoldOutlined\r\n} from '@ant-design/icons';\r\nimport Editor from '../Editor/editor';\r\nimport NoteList from '../note/note';\r\nimport http from '../../server';\r\nimport './body.css';\r\n\r\nconst { TextArea } = Input;\r\nfunction GenNonDuplicateID(randomLength) {\r\n  return Number(Math.random().toString().substr(3, randomLength) + Date.now()).toString(36)\r\n}\r\nconst data = [\r\n  {\r\n    id: GenNonDuplicateID(8),\r\n    title: '你好，李焕英',\r\n    description: \"这是一段描述\",\r\n    content: \"<p>你好，李焕英</p>\"\r\n  },\r\n  {\r\n    id: GenNonDuplicateID(8),\r\n    title: '沐浴之王',\r\n    description: \"这是一段描述\",\r\n    content: \"<p>沐浴之王</p>\"\r\n  }\r\n];\r\nconst groundData = [\r\n  {\r\n    id: GenNonDuplicateID(8),\r\n    title: '战狼2',\r\n    description: \"这是一段描述\",\r\n    content: `<p>&ensp;&ensp;&ensp;战狼2</p><p>&ensp;&ensp;&ensp;说到爱国心，说到军人梦，暑假里最热门的电影,《战狼2》，大家一定都不陌生吧？</p><p>&ensp;&ensp;&ensp;\r\n\r\n    影片讲述了脱下军装的冷锋被卷入了一场非洲国家的叛乱，本来能够安全撤离的他无法忘记军人的职责，重回战场展开救援的故事</p><p>&ensp;&ensp;&ensp;\r\n    \r\n    2015年3月26日起，由沙特阿拉伯和埃及、约旦、苏丹等其他海湾国家参加的国际联军在也门发动打击胡塞武装的军事行动。此次军事行动使得当地局势骤然紧张。当时在也门共有590名中国公民，为了保障这些人的生命财产安全，中国政府决定派正在亚丁湾执行护航任务的临沂舰、潍坊舰和微山湖舰转向也门执行撤侨任务。2015年3月29日中午，海军第十九批护航编队临沂舰抵达也门亚丁港。临沂舰进入一级战斗部署，各战位严密组织观察警戒，全副武装的特战队员和水兵荷枪实弹在码头安全警戒，这是中国第一次使用武装军舰从外国撤侨，临沂舰接回的第一批人员共计124人，这124人在39分钟内全部登舰完毕，可见中国海军的效率之高。3月30日，第二批400多人乘坐中国海军潍坊舰顺利离开也门使得这400多人在80分钟内就全部顺利登舰撤离。全部中国公民都已完成撤离。</p><p>&ensp;&ensp;&ensp;\r\n    \r\n    2015年4月25日，尼泊尔境内发生8.1级大地震，尼泊尔是一个旅游国家，地震发生时有大量中国游客在境内旅游。地震发生后，，中国率先调动国航，南航，东航的客机进入加德满都机场，成为此次灾难中第一个完成撤侨的国家，共安全接回5685名在尼滞留中国公民。</p><p>&ensp;&ensp;&ensp;\r\n    \r\n    一朝是战狼，终身是战狼。军旅已终，情怀犹在;军装已脱，职责难释;军营已别，担当不忘，祖国与人民需要，召必回，他为拯救深陷屠杀的同胞和难民勇闯战区。</p><p>&ensp;&ensp;&ensp;\r\n    \r\n    影片中，空手擒拿一招制敌，飞檐走壁弹无虚发，扑面而来的军人血性、责任担当和爱国情怀感染着每名观众，更唤醒了沉寂在我内心深处的英雄情结和民族血性，唤醒了我的军人梦想。从冷锋的身上，我看到了中国军人身上的阳刚、英雄与担当，看到了新时代军人的英雄血性在新时代的强军征程上焕发出的新活力。</p><p>&ensp;&ensp;&ensp;\r\n    \r\n    我爱我的祖国，我有一个军人梦！</p>`\r\n  },\r\n  {\r\n    id: GenNonDuplicateID(8),\r\n    title: '功夫之王',\r\n    description: \"这是一段描述\",\r\n    content: \"<p>功夫之王</p>\"\r\n  }\r\n];\r\nlet _this;\r\nexport default class NavBar extends Component {\r\n  constructor() {\r\n    super();\r\n    _this = this;\r\n    this.previewDom = createRef();\r\n    this.state = {\r\n      collapsed: false,\r\n      showPage: 1,//导航栏标志位\r\n      isShow: true, //notelist是否显示\r\n      editItem: {}, //当前操作项\r\n      showItem: {},//editor 展示项\r\n      data: [], //我的笔记列表\r\n      groundData: [], //分享列表\r\n      flag: false, //预览页显示\r\n      modal1Visible:false,\r\n      description:\"\",\r\n      title:\"\",\r\n      newStatus:false\r\n    };\r\n  }\r\n  toggleCollapsed = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  };\r\n  componentDidMount(){\r\n   _this.getList();\r\n    \r\n  }\r\n\r\n  menuChange = (code) => {\r\n    var changeObj = {\r\n      note: \"1\",\r\n      ground: \"2\",\r\n      my: \"3\"\r\n    }\r\n    if (code == 'note') {\r\n      this.setState({\r\n        showPage: changeObj[code],\r\n        showItem: this.state.data[0] ? this.state.data[0] : {},\r\n        isShow: true,\r\n        flag: false\r\n      });\r\n    }\r\n    if(code == 'ground'){\r\n      http.get('share')\r\n      .then(data=>{\r\n        console.log(data);\r\n        this.setState({\r\n          groundData:data.data.data\r\n        })\r\n      })\r\n    }\r\n    this.setState({\r\n      showPage: changeObj[code],\r\n      isShow: true,\r\n      flag: false\r\n    });\r\n  }\r\n  preview = (currentItem) => {\r\n    let editItem = currentItem.item;\r\n    if (editItem.preview) {\r\n      this.previewDom.current.innerHTML = editItem.content;\r\n    }\r\n    if (editItem._status == \"edit\") {\r\n      this.setState({\r\n        editItem,\r\n        showItem: editItem,\r\n        isShow: editItem.flag,\r\n        flag: editItem.preview\r\n      }, () => {\r\n        console.log(this.state)\r\n      })  \r\n    }else {\r\n      this.setState({\r\n        editItem,\r\n        isShow: editItem.flag,\r\n        flag: editItem.preview\r\n      }, () => {\r\n        console.log(this.state)\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  async delItem (currentItem) {\r\n    let editItem = currentItem.item;\r\n    Modal.confirm({\r\n      title: '确认',\r\n      // icon: <ExclamationCircleOutlined />,\r\n      content: '确认要删除吗?',\r\n      okText: '确认',\r\n      cancelText: '取消',\r\n      onOk: () => {\r\n        // let newList = _.filter(_this.state.data, function (o) {\r\n        //   return o.id != editItem.id;\r\n        // })\r\n        http.delete(`delnote/${editItem.id}`).then(data=>{\r\n          if(data.data.success){\r\n            _this.getList();\r\n            if (_this.state.showItem && _this.state.showItem.id && editItem.id == _this.state.showItem.id && _this.state.data.length != 0) {\r\n              _this.setState({\r\n                editItem,\r\n                showItem: _this.state.data[0]\r\n              })\r\n            } else {\r\n              _this.setState({\r\n                editItem,\r\n                showItem: {\r\n                  id: null,\r\n                  description: null,\r\n                  content: null,\r\n                  title: null\r\n                }\r\n              });\r\n            }\r\n          }\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  addItem = () => {\r\n    this.setState({\r\n      isShow: false,\r\n      showItem: {},\r\n      modal1Visible:true,\r\n      newStatus:true,\r\n      title:\"\",\r\n      description:\"\"\r\n    })\r\n  }\r\n\r\n  onSave =(isShow)=>{\r\n    _this.getList()\r\n    this.setState({\r\n      isShow:isShow\r\n    })\r\n  }\r\n  getList = ()=>{\r\n    var user = JSON.parse(decodeURIComponent(window.atob(localStorage.getItem(\"user\"))));\r\n    http.get( `allnotes/${user.id}`).then((data)=>{\r\n      if(data.data.success){\r\n        _this.setState({\r\n          data:data.data.data,\r\n        })\r\n      } else {\r\n        message.error('获取列表失败')\r\n      }\r\n    });\r\n      \r\n  }\r\n  setModal1Visible = (showState)=>{\r\n    this.setState({\r\n      modal1Visible:showState\r\n    })\r\n  }\r\n  onDescriptionChange = ({ target: { value } })=>{\r\n    this.setState({\r\n      description: value\r\n    })\r\n  }\r\n  onTitleChange = ({ target: { value } })=>{\r\n    this.setState({\r\n      title: value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"bodyContent\" >\r\n        <div className=\"navList\" >\r\n          <Menu\r\n            defaultSelectedKeys={['1']}\r\n            defaultOpenKeys={['sub1']}\r\n            mode=\"inline\"\r\n            theme=\"light\"\r\n            inlineCollapsed={this.state.collapsed}\r\n          >\r\n            <Button type=\"primary\" onClick={this.toggleCollapsed} style={this.state.collapsed ? { width: 80 } : { width: \"100%\" }}>\r\n              {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined)}\r\n            </Button>\r\n            <Menu.Item key=\"1\" icon={<i className=\"iconfont iconbiji\"></i>} onClick={this.menuChange.bind(this, 'note')}>\r\n              笔记\r\n            </Menu.Item>\r\n            <Menu.Item key=\"2\" icon={<i className=\"iconfont iconguangchang\"></i>} onClick={this.menuChange.bind(this, 'ground')}>\r\n              分享广场\r\n            </Menu.Item>\r\n            <Menu.Item key=\"3\" icon={<i className=\"iconfont iconwode\"></i>} onClick={this.menuChange.bind(this, 'my')}>\r\n              我的\r\n            </Menu.Item>\r\n          </Menu>\r\n        </div>\r\n        <div className=\"content\">\r\n          {\r\n            this.state.showPage == 1 && this.state.isShow\r\n              ? <div className=\"noteList\">\r\n                <Button type=\"primary\" shape=\"round\" onClick={() => { this.addItem() }}>新建</Button>\r\n                {/* <Button type=\"default\">新增</Button> */}\r\n                <NoteList preview={this.preview} data={this.state.data} delItem={this.delItem} />\r\n              </div>\r\n              : null\r\n          }\r\n          {\r\n            this.state.showPage == 1\r\n              ? <div className=\"editor\">\r\n                {this.state.showItem.content\r\n                ?<Editor editItem={this.state.showItem} aritcle={{\"title\":this.state.title,\"description\":this.state.description}} newStatus={this.state.newStatus} save={this.onSave}/>\r\n                :<Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\r\n                }\r\n                {/* {!this.state.isShow\r\n                ?<Editor editItem={this.state.showItem} save={this.onSave}/>\r\n                :<Empty image={Empty.PRESENTED_IMAGE_SIMPLE}/>\r\n                } */}\r\n              </div>\r\n              : null\r\n          }\r\n          {\r\n            this.state.showPage == 2\r\n              ? <div className=\"noteList\">\r\n                <NoteList preview={this.preview} isPersonal data={this.state.groundData} delItem={this.delItem} />\r\n              </div>\r\n              : null\r\n          }\r\n          {\r\n            this.state.showPage == 3\r\n              ? <div className=\"noteList\">\r\n                <NoteList preview={this.preview} isPersonal data={this.state.groundData} delItem={this.delItem} />\r\n              </div>\r\n              : null\r\n          }\r\n          <div className=\"editorPreview\"\r\n            ref={this.previewDom}\r\n            style={!this.state.flag ? { display: \"none\" } : { display: \"block\" }}\r\n          ></div>\r\n        </div>\r\n        <Modal\r\n          title=\"新建笔记\"\r\n          style={{ top: 20 }}\r\n          visible={this.state.modal1Visible}\r\n          onOk={() => this.setModal1Visible(false)}\r\n          onCancel={() => this.setModal1Visible(false)}\r\n        >\r\n          \r\n          <p>\r\n            标题:<Input placeholder=\"请输入标题\" onChange = {this.onTitleChange} value={this.state.title}/>\r\n          </p>\r\n          <p>\r\n            描述:\r\n            <TextArea\r\n              value={this.state.description}\r\n              onChange={this.onDescriptionChange}\r\n              placeholder=\"请输入描述\"\r\n              autoSize={{ minRows: 3, maxRows: 5 }}\r\n            />\r\n          </p>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\server.js",["56"],"F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\note\\note.js",["57","58","59","60","61","62","63","64","65"],"import React, { Component } from 'react';\r\nimport { List, Avatar, message, Modal } from 'antd';\r\n\r\n// function GenNonDuplicateID(randomLength) {\r\n//   return Number(Math.random().toString().substr(3, randomLength) + Date.now()).toString(36)\r\n// }\r\nexport default class NoteList extends Component {\r\n  state = {\r\n    listData: [],\r\n    isHorizontal:true\r\n  }\r\n  // 在getDerivedStateFromProps中进行state的改变\r\n  static getDerivedStateFromProps(nextProps, prevState) {\r\n    return {\r\n      listData: nextProps.data,\r\n    };\r\n  }\r\n  //编辑当前列表项\r\n  editList = (item, flag) => {\r\n    item.flag = flag;\r\n    item.preview = false;\r\n    item._status = \"edit\";\r\n    this.props.preview({ item })\r\n  }\r\n  //删除当前列表项\r\n  delList = (item) => {\r\n    item._status = \"delete\";\r\n    this.props.delItem({ item });\r\n\r\n  }\r\n  //广场预览分享数据\r\n  previewList = (item, flag) => {\r\n    item.preview = flag;\r\n    item._status = \"preview\";\r\n    this.props.preview({ item });\r\n    this.setState({\r\n      isHorizontal:false\r\n    })\r\n  }\r\n\r\n  gitClone = (item, flag) => {\r\n    // message.info(JSON.stringify(item));\r\n    Modal.confirm({\r\n      title: '确认',\r\n      content: '确认要克隆该笔记吗?',\r\n      okText: '确认',\r\n      cancelText: '取消',\r\n      onOk: () => {\r\n\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    let { listData } = this.state;\r\n    return (\r\n      <div>\r\n        {\r\n          // 分享广场\r\n          this.props.isPersonal\r\n            ? <List\r\n              itemLayout={this.state.isHorizontal?\"horizontal\":\"vertical\"}\r\n              dataSource={listData}\r\n              renderItem={item => (\r\n                <List.Item\r\n                  style={{marginLeft:50}}\r\n                  actions={[\r\n                    <a key=\"list-loadmore-edit\" onClick={() => { this.previewList(item, true) }}>预览</a>,\r\n                    <a style={{ marginRight: 30 }} key=\"list-loadmore-clone\" onClick={() => { this.gitClone(item, false) }}>克隆</a>\r\n                  ]}\r\n                >\r\n                  <List.Item.Meta\r\n                    title={<a onClick={() => { this.previewList(item, true) }}>{item.title}</a>}\r\n                    description={item.description}\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n            : <List\r\n              itemLayout=\"vertical\"\r\n              dataSource={listData}\r\n              renderItem={item => (\r\n                <List.Item\r\n                  style={{marginLeft:50}}\r\n                  actions={[<a key=\"list-loadmore-delete\" onClick={() => {  }}>分享</a>, \r\n                  <a  key=\"list-loadmore-edit\" onClick={() => { this.editList(item, true) }}>编辑</a>, \r\n                  <a key=\"list-loadmore-delete\" onClick={() => { this.delList(item) }}>删除</a>\r\n                  \r\n                ]}\r\n                >\r\n                  <List.Item.Meta\r\n                    title={<a onClick={() => { this.editList(item, true) }}>{item.title}</a>}\r\n                    description={item.description}\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\Editor\\editor.js",["66","67","68","69"],"import React from 'react'\r\n// 引入编辑器组件\r\nimport BraftEditor from 'braft-editor'\r\n// 引入编辑器样式\r\nimport 'braft-editor/dist/index.css'\r\nimport './editor.css'\r\n// import 'braft-editor/dist/output.css'\r\nimport http from '../../server';\r\nimport { message } from 'antd';\r\n\r\nlet titleStr = \"\", descriptionStr = \"\";\r\nlet defaultStr = `\r\n    <p></p>\r\n    <p class=\"title\">标题:${titleStr}</p><br>\r\n    <p class=\"description\">描述:${descriptionStr}</p><br><hr><br>\r\n`;\r\n// const defaultStr = \"\";\r\nlet _this;\r\nexport default class Editor extends React.Component {\r\n\r\n\tstate = {\r\n\t\t// 创建一个空的editorState作为初始值\r\n\t\teditorState: BraftEditor.createEditorState(null),\r\n\t\ttitle: \"这是一个标题\",\r\n\t\tdescription: \"这是一段描述\",\r\n\t\teditItem: {id:\"\",content:\"\",title:\"\",decription:\"\"}\r\n\t}\r\n\r\n\t//后台请求数据\r\n\tfetchEditorContent = () => {\r\n\t\treturn defaultStr;\r\n\t}\r\n\t\r\n\t// static getDerivedStateFromProps(nextProps, prevState) {\r\n\t//     if(nextProps.editItem.id){\r\n\t//         var state = BraftEditor.createEditorState(defaultStr + nextProps.editItem.content);\r\n\t//         console.log(state)\r\n\r\n\t//         editorInstance && editorInstance.clearEditorContent();\r\n\t//         editorInstance && editorInstance.setValue(state);\r\n\t//         return {\r\n\t//             editItem: nextProps.editItem\r\n\t//         };\r\n\t//     }\r\n\t//     return null;\r\n\t// }\r\n\tcomponentWillReceiveProps(nextProps) {\r\n\t\ttitleStr = nextProps.aritcle.title;\r\n\t\tdescriptionStr = nextProps.aritcle.description;\r\n\t\tdefaultStr = `\r\n\t\t\t\t\t<p></p>\r\n\t\t\t\t\t<p class=\"title\">标题:${titleStr}</p><br>\r\n\t\t\t\t\t<p class=\"description\">描述:${descriptionStr}</p><br><hr><br>\r\n\t\t\t`;\r\n\t\tif (nextProps.editItem.id) {\r\n\t\t\tthis.setState({\r\n\t\t\t\teditItem: nextProps.editItem,\r\n\t\t\t\teditorState: BraftEditor.createEditorState(nextProps.editItem.content)\r\n\t\t\t})\r\n\t\t} else {\r\n\t\t\tthis.setState({\r\n\t\t\t\teditItem: nextProps.editItem,\r\n\t\t\t\teditorState: BraftEditor.createEditorState(defaultStr)\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\tasync componentDidMount() {\r\n\t\t_this = this;\r\n\t\t// 假设此处从服务端获取html格式的编辑器内容\r\n\t\t// const htmlContent = await this.fetchEditorContent()\r\n\t\tlet htmlContent = \"\";\r\n\t\tlet defaultStr = \"\";\r\n\t\tif(this.props.newStatus){\r\n\t\t\ttitleStr = this.props.aritcle.title;\r\n\t\t\tdescriptionStr = this.props.aritcle.description;\r\n\t\t\tdefaultStr = `\r\n\t\t\t\t\t<p></p>\r\n\t\t\t\t\t<p class=\"title\">标题:${titleStr}</p><br>\r\n\t\t\t\t\t<p class=\"description\">描述:${descriptionStr}</p><br><hr><br>\r\n\t\t\t`;\r\n\t\t}else{\r\n\t\t\thtmlContent = this.props.editItem.content?this.props.editItem.content:\"\";\r\n\t\t\t// 使用BraftEditor.createEditorState将html字符串转换为编辑器需要的editorStat\r\n\t\t}\r\n\t\tthis.setState({\r\n\t\t\teditorState: BraftEditor.createEditorState(defaultStr + htmlContent),\r\n\t\t\teditItem:this.props.editItem\r\n\t\t})\r\n\t}\r\n\r\n\tsubmitContent = async (isMenu) => {\r\n\t\t// 在编辑器获得焦点时按下ctrl+s会执行此方法\r\n\t\t// 编辑器内容提交到服务端之前，可直接调用editorState.toHTML()来获取HTML格式的内容\r\n\t\t// message.success('保存成功！', 2)\r\n\t\tconst htmlContent = this.state.editorState.toHTML()\r\n\t\tconsole.log(htmlContent);\r\n\t\t//0 新建 1 保存\r\n\t\tif(this.state.editItem.id){\r\n\t\t\tawait _this.saveEditorContent(htmlContent,isMenu,'1')\r\n\t\t} else {\r\n\t\t\tawait _this.saveEditorContent(htmlContent,isMenu,'0')\r\n\t\t}\r\n\r\n\t\t\t// ? message.info('edit',2)\r\n\t\t\t// :message.info('add',2)\r\n\t\t// const result = await _this.saveEditorContent(htmlContent,isMenu)\r\n\t\t\r\n\t}\r\n\t//向后台发送请求保存当前数据\r\n\tsaveEditorContent = (data,isMenu,isNew) => {\r\n\t\tvar user = JSON.parse(decodeURIComponent(window.atob(localStorage.getItem(\"user\"))));\r\n\t\tvar url = \"\";\r\n\t\tvar params = {}\r\n\t\tif(isNew == \"0\"){\r\n\t\t\turl = \"notecreate\";\r\n\t\t\tparams = {\r\n\t\t\t\t\"uid\":user.id,\r\n\t\t\t\t\"username\":user.username,\r\n\t\t\t\t\"title\":this.props.aritcle.title,\r\n\t\t\t\t\"description\":this.props.aritcle.description,\r\n\t\t\t\t\"content\":data,\r\n\t\t\t\t\"ispub\":true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\turl = \"updatenote\";\r\n\t\t\tparams = {\r\n\t\t\t\t\"id\":this.state.editItem.id,\r\n\t\t\t\t\"content\":data\r\n\t\t\t}\r\n\t\t}\r\n\t\thttp.post(url,params).then((data)=>{\r\n\t\t\tif(data.data.success){\r\n\t\t\t\tif(isMenu){\r\n\t\t\t\t\tthis.props.save(true)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\tcalcleContent = ()=>{\r\n\t\tthis.props.save(true)\r\n\t}\r\n\thandleEditorChange = (editorState) => {\r\n\t\tthis.setState({ editorState })\r\n\t}\r\n\t//由于图片上传、视频上传项目中都是单独走的接口，需要一个上传的方法\r\n\tmyUploadFn = (param) => {\r\n\t\tconsole.log('param', param);\r\n\t\tconst serverURL = `${window.sessionStorage.baseURL ? JSON.parse(window.sessionStorage.baseURL) : \"\"}/fileHandle/upload`//上传接口地址\r\n\t\tconst xhr = new XMLHttpRequest();\r\n\t\tconst fd = new FormData();\r\n\t\tif (param.file.type.indexOf(\"image\") != \"-1\" && (param.file.size / 1024 / 1024) > 9) {\r\n\t\t\tparam.error({\r\n\t\t\t\tmsg: '请上传小于10M的图片'\r\n\t\t\t})\r\n\t\t\tmessage.warning(\"请上传小于10M的图片\")\r\n\t\t}\r\n\t\tif (param.file.type.indexOf(\"video\") != \"-1\") {\r\n\t\t\tif (param.file.type.indexOf(\"mp4\") == \"-1\") {\r\n\t\t\t\tparam.error({\r\n\t\t\t\t\tmsg: '请上传mp4格式的视频'\r\n\t\t\t\t})\r\n\t\t\t\tmessage.warning(\"请上传mp4格式的视频\")\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif ((param.file.size / 1024 / 1024) > 100) {\r\n\t\t\t\tparam.error({\r\n\t\t\t\t\tmsg: '请上传小于100M的视频'\r\n\t\t\t\t})\r\n\t\t\t\tmessage.warning(\"请上传小于100M的视频\")\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst successFn = (response) => {\r\n\t\t\t// 假设服务端直接返回文件上传后的地址\r\n\t\t\t// 上传成功后调用param.success并传入上传后的文件地址\r\n\t\t\tconst upLoadObject = JSON.parse(response && response.currentTarget && response.currentTarget.response);\r\n\t\t\t// console.log(\"JSON.parse(xhr.responseText).data\",JSON.parse(xhr.responseText).data)\r\n\t\t\tparam.success({\r\n\t\t\t\turl: `${window.sessionStorage.baseURL ? JSON.parse(window.sessionStorage.baseURL) + \"/fileHandle/video/preview?videoUrl=\" : \"\"}${JSON.parse(xhr.responseText).data}`,\r\n\t\t\t\tmeta: {\r\n\t\t\t\t\tid: upLoadObject && upLoadObject.id,\r\n\t\t\t\t\ttitle: upLoadObject && upLoadObject.fileName,\r\n\t\t\t\t\talt: upLoadObject && upLoadObject.fileName,\r\n\t\t\t\t\tloop: false, // 指定音视频是否循环播放\r\n\t\t\t\t\tautoPlay: true, // 指定音视频是否自动播放\r\n\t\t\t\t\tcontrols: true, // 指定音视频是否显示控制栏\r\n\t\t\t\t\tposter: '', // 指定视频播放器的封面\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t};\r\n\r\n\t\tconst progressFn = (event) => {\r\n\t\t\t// 上传进度发生变化时调用param.progress\r\n\t\t\tparam.progress(event.loaded / event.total * 100)\r\n\r\n\t\t};\r\n\r\n\t\tconst errorFn = (response) => {\r\n\t\t\t// 上传发生错误时调用param.error\r\n\t\t\tparam.error({\r\n\t\t\t\tmsg: 'unable to upload.'\r\n\t\t\t})\r\n\t\t};\r\n\r\n\t\txhr.upload.addEventListener(\"progress\", progressFn, false);\r\n\t\txhr.addEventListener(\"load\", successFn, false);\r\n\t\txhr.addEventListener(\"error\", errorFn, false);\r\n\t\txhr.addEventListener(\"abort\", errorFn, false);\r\n\t\tfd.append('file', param.file);\r\n\t\txhr.open('POST', serverURL, true);\r\n\t\t//  xhr.setRequestHeader(\"X-Auth-Token\", User.getToken());//header中token的设置\r\n\t\txhr.send(fd)\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { editorState } = this.state;\r\n\t\tconst extendControls = [\r\n\t\t\t{\r\n\t\t\t\tkey: 'custom-button',\r\n\t\t\t\ttype: 'button',\r\n\t\t\t\ttext: '保存',\r\n\t\t\t\tonClick: this.submitContent.bind(this,true)\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\tkey: 'custom-button2',\r\n\t\t\t\ttype: 'button',\r\n\t\t\t\ttext: '取消',\r\n\t\t\t\tonClick: this.calcleContent.bind(this)\r\n\t\t\t}\r\n\t\t]\r\n\t\treturn (\r\n\t\t\t<div className=\"braft-output-content\">\r\n\t\t\t\t<BraftEditor\r\n\t\t\t\t\tplaceholder=\"请输入正文内容\"\r\n\t\t\t\t\tvalue={editorState}\r\n\t\t\t\t\tonChange={this.handleEditorChange}\r\n\t\t\t\t\tonSave={this.submitContent.bind(this,false)}\r\n\t\t\t\t\textendControls={extendControls}\r\n\t\t\t\t\t// media={{ uploadFn: this.myUploadFn }}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t)\r\n\r\n\t}\r\n\r\n}","F:\\桌面\\论文\\noteTaking\\src\\web\\src\\components\\utils\\index.js",[],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":2,"column":20,"nodeType":"76","messageId":"77","endLine":2,"endColumn":29},{"ruleId":"74","severity":1,"message":"78","line":7,"column":9,"nodeType":"76","messageId":"77","endLine":7,"endColumn":14},{"ruleId":"79","severity":1,"message":"80","line":84,"column":36,"nodeType":"81","messageId":"82","endLine":84,"endColumn":38},{"ruleId":"74","severity":1,"message":"83","line":3,"column":8,"nodeType":"76","messageId":"77","endLine":3,"endColumn":9},{"ruleId":"74","severity":1,"message":"84","line":17,"column":7,"nodeType":"76","messageId":"77","endLine":17,"endColumn":11},{"ruleId":"74","severity":1,"message":"85","line":31,"column":7,"nodeType":"76","messageId":"77","endLine":31,"endColumn":17},{"ruleId":"79","severity":1,"message":"80","line":94,"column":14,"nodeType":"81","messageId":"82","endLine":94,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":102,"column":13,"nodeType":"81","messageId":"82","endLine":102,"endColumn":15},{"ruleId":"79","severity":1,"message":"80","line":122,"column":26,"nodeType":"81","messageId":"82","endLine":122,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":158,"column":80,"nodeType":"81","messageId":"82","endLine":158,"endColumn":82},{"ruleId":"79","severity":1,"message":"86","line":158,"column":134,"nodeType":"81","messageId":"82","endLine":158,"endColumn":136},{"ruleId":"79","severity":1,"message":"80","line":253,"column":33,"nodeType":"81","messageId":"82","endLine":253,"endColumn":35},{"ruleId":"79","severity":1,"message":"80","line":262,"column":33,"nodeType":"81","messageId":"82","endLine":262,"endColumn":35},{"ruleId":"79","severity":1,"message":"80","line":276,"column":33,"nodeType":"81","messageId":"82","endLine":276,"endColumn":35},{"ruleId":"79","severity":1,"message":"80","line":283,"column":33,"nodeType":"81","messageId":"82","endLine":283,"endColumn":35},{"ruleId":"74","severity":1,"message":"87","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":10},{"ruleId":"74","severity":1,"message":"88","line":2,"column":16,"nodeType":"76","messageId":"77","endLine":2,"endColumn":22},{"ruleId":"74","severity":1,"message":"89","line":2,"column":24,"nodeType":"76","messageId":"77","endLine":2,"endColumn":31},{"ruleId":"90","severity":1,"message":"91","line":68,"column":21,"nodeType":"92","endLine":68,"endColumn":98},{"ruleId":"90","severity":1,"message":"91","line":69,"column":21,"nodeType":"92","endLine":69,"endColumn":125},{"ruleId":"90","severity":1,"message":"91","line":73,"column":28,"nodeType":"92","endLine":73,"endColumn":80},{"ruleId":"90","severity":1,"message":"91","line":85,"column":29,"nodeType":"92","endLine":85,"endColumn":80},{"ruleId":"90","severity":1,"message":"91","line":86,"column":19,"nodeType":"92","endLine":86,"endColumn":94},{"ruleId":"90","severity":1,"message":"91","line":87,"column":19,"nodeType":"92","endLine":87,"endColumn":88},{"ruleId":"90","severity":1,"message":"91","line":92,"column":28,"nodeType":"92","endLine":92,"endColumn":77},{"ruleId":"79","severity":1,"message":"80","line":114,"column":12,"nodeType":"81","messageId":"82","endLine":114,"endColumn":14},{"ruleId":"79","severity":1,"message":"86","line":151,"column":40,"nodeType":"81","messageId":"82","endLine":151,"endColumn":42},{"ruleId":"79","severity":1,"message":"86","line":157,"column":40,"nodeType":"81","messageId":"82","endLine":157,"endColumn":42},{"ruleId":"79","severity":1,"message":"80","line":158,"column":39,"nodeType":"81","messageId":"82","endLine":158,"endColumn":41},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'state' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'_' is defined but never used.","'data' is assigned a value but never used.","'groundData' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'qs' is defined but never used.","'Avatar' is defined but never used.","'message' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]